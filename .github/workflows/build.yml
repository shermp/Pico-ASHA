name: Build Pico-ASHA Firmware

on:
    push:
    pull_request:

env:
    PICO_SDK_COMMIT_HASH: ee68c78d0afae2b69c03ae1a72bf5cc267a2d94c
    CYW43_DRIVER_COMMIT_HASH: 7f422fef4ea5bff7285fb78340d3f28f5461cff2

jobs:
    build_firmware:
        strategy:
          matrix:
            board: ["pico_w", "pico2_w"]
        name: Build Pico-ASHA for ${{ matrix.board }}
        runs-on: ubuntu-24.04
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                path: pico-asha

            - name: Checkout Pico SDK
              uses: actions/checkout@v4
              with:
                repository: raspberrypi/pico-sdk
                path: pico-sdk
                submodules: recursive
                ref: "${{ env.PICO_SDK_COMMIT_HASH }}"
                fetch-depth: "0"

            - name: Update cyw43-driver for DLE fix
              run: |
                cd pico-sdk/lib/cyw43-driver
                git fetch
                git checkout ${{ env.CYW43_DRIVER_COMMIT_HASH }}

            - name: Patch TinyUSB 0.18 with UAC2 fix
              run: |
                cd pico-sdk/lib/tinyusb
                git apply ../../../pico-asha/patch/tinyusb-v0.18-uac2-fix.patch

            - name: Install dependencies
              run: |
                sudo apt-get update && sudo apt-get -y install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib
            
            - name: Set env variables
              run: |
                echo "PICO_SDK_PATH=$(realpath ./pico-sdk)" >> "$GITHUB_ENV"
            
            - name: Configure build
              run: |
                mkdir -p pico-asha/build/${{ matrix.board }}
                cd pico-asha/build/${{ matrix.board }}
                cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DPICO_BOARD=${{ matrix.board }} ../..

            - name: Compile
              run: |
                cd pico-asha/build/${{ matrix.board }}
                cmake --build .

            - name: Upload UF2 and ELF binaries
              uses: actions/upload-artifact@v4
              with:
                name: pico-asha-firmware-${{ matrix.board }}
                path: pico-asha/build/${{ matrix.board }}/pico_asha.[ue][fl][2f]

    build_gui_windows:
        name: Build GUI for Windows
        runs-on: windows-2022
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            
            - name: Install Qt
              uses: jurplel/install-qt-action@v4.2.1
              with:
                version: '6.8.3'
                host: 'windows'
                target: 'desktop'
                arch: 'win64_msvc2022_64'
                modules: 'qtserialport'
                cache: 'true'
                cache-key-prefix: 'install-qt-action'
                setup-python: 'true'
                set-env: 'true'
            
            - name: Setup VS dev cmd
              uses: ilammy/msvc-dev-cmd@v1.13.0

            - name: Configure cmake (using Ninja)
              run: |
                cd gui
                md build
                cd build
                cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" ..
            
            - name: Compile GUI
              run: |
                cd gui\build
                cmake --build .

            - name: Install GUI to staging directory
              run: |
                cd gui\build
                cmake --install . --prefix "$pwd\PicoASHAGui-Installed\PicoASHAGui"

            - name: Remove uneeded libraries from package
              run: |
                cd gui\build\PicoASHAGui-Installed\PicoASHAGui\bin
                del dxcompiler.dll
                del dxil.dll

            - name: Upload package
              uses: actions/upload-artifact@v4
              with:
                name: pico-asha-gui-win64
                path: gui/build/PicoASHAGui-Installed/PicoASHAGui
